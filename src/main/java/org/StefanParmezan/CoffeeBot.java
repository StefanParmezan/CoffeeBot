package org.StefanParmezan;

import org.StefanParmezan.Models.Drinks;
import org.StefanParmezan.Models.UserState;
import org.StefanParmezan.Services.BuyCoffeeService;
import org.StefanParmezan.Services.FileReadService;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendDocument;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import java.io.*;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

public class CoffeeBot extends TelegramLongPollingBot {

    private final Map<Long, UserState> userStates = new HashMap<>();
    private final BuyCoffeeService buyCoffeeService = BuyCoffeeService.getInstance();

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            Long chatId = update.getMessage().getChatId();
            String messageText = update.getMessage().getText();

            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (userStates.containsKey(chatId)) {
                UserState state = userStates.get(chatId);

                if (state == UserState.AWAITING_LOCATION) {
                    if (messageText.equalsIgnoreCase("–∑–¥–µ—Å—å")) {
                        sendMessage(chatId, """
                                –û—Ç–ø—Ä–∞–≤—å—Ç–µ .txt —Ñ–∞–π–ª —Å –∑–∞–∫–∞–∑–æ–º.
                                –§–æ—Ä–º–∞—Ç:
                                Latte=2
                                Matcha=1+Cheese""");
                        userStates.put(chatId, UserState.AWAITING_ORDER_FILE_HERE);

                    } else if (messageText.equalsIgnoreCase("—Å —Å–æ–±–æ–π")) {
                        sendMessage(chatId, """
                                –û—Ç–ø—Ä–∞–≤—å—Ç–µ .txt —Ñ–∞–π–ª —Å –∑–∞–∫–∞–∑–æ–º.
                                –§–æ—Ä–º–∞—Ç:
                                Latte=2
                                Matcha=1+Cheese""");
                        userStates.put(chatId, UserState.AWAITING_ORDER_FILE_TO_GO);
                    } else {
                        sendMessage(chatId, "–ù–∞–ø–∏—à–∏—Ç–µ '–∑–¥–µ—Å—å' –∏–ª–∏ '—Å —Å–æ–±–æ–π'");
                    }

                    return; // –≤—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã
                }
            }

            // 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            switch (messageText) {
                case "/start":
                    sendMessage(chatId, """
                            –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ –∫–æ—Ñ–µ üßÄ
                            /menu ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é
                            /buy ‚Äî —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑""");
                    break;

                case "/menu":
                    sendMessage(chatId, Drinks.getDrinksToString());
                    break;

                case "/buy":
                    sendMessage(chatId, "–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–¥–µ—Å—å –∏–ª–∏ —Å —Å–æ–±–æ–π?");
                    userStates.put(chatId, UserState.AWAITING_LOCATION);
                    break;

                default:
                    sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: " + messageText);
                    break;
            }

        } else if (update.hasMessage() && update.getMessage().hasDocument()) {
            Long chatId = update.getMessage().getChatId();
            UserState state = userStates.getOrDefault(chatId, UserState.IDLE);
            if (state == UserState.AWAITING_ORDER_FILE_HERE || state == UserState.AWAITING_ORDER_FILE_TO_GO) {
                try {
                    String fileId = update.getMessage().getDocument().getFileId();

                    // –ü–æ–ª—É—á–∞–µ–º fileUrl

                    org.telegram.telegrambots.meta.api.objects.File telegramFile = execute(new GetFile(fileId));
                    String fileUrl = telegramFile.getFileUrl(getBotToken());

                    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ —Å—Ä–∞–∑—É —Å—á–∏—Ç–∞–µ–º —Å—É–º–º—É
                    try (InputStream fileStream = new URL(fileUrl).openStream()) {
                        int totalCost = buyCoffeeService.CalculatePrice(fileStream);

                        if (state == UserState.AWAITING_ORDER_FILE_HERE) {
                            sendMessage(chatId, "–ò—Ç–æ–≥–æ: " + totalCost + " ‚ÇΩ\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∫–æ—Ñ–µ!");
                        } else {
                            java.io.File receiptFile = createLocalReceiptFile(chatId, totalCost);
                            sendDocument(chatId, receiptFile);
                        }
                    }

                    userStates.remove(chatId);
                } catch (Exception e) {
                    sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
                    e.printStackTrace();
                }
            }
        }
    }

    protected void sendMessage(Long chatId, String text) {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId.toString());
        sendMessage.setText(text);

        try {
            execute(sendMessage);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    protected void sendDocument(Long chatId, java.io.File file) {
        SendDocument sendDocument = new SendDocument();
        sendDocument.setChatId(chatId.toString());

        try {
            sendDocument.setDocument(new InputFile(new FileInputStream(file), file.getName()));
            execute(sendDocument);
        } catch (TelegramApiException | FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    private java.io.File createLocalReceiptFile(Long chatId, int totalCost) {
        try {
            java.io.File tempFile = java.io.File.createTempFile("–í–∞—à_–ß–µ–∫: " + totalCost, ".txt");

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {
                writer.write("‚òï –ß–µ–∫ CoffeeBot");
                writer.newLine();
                writer.write("--------------------");
                writer.newLine();
                writer.write("–ò—Ç–æ–≥–æ: " + totalCost + " ‚ÇΩ");
                writer.newLine();
                writer.write("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!");
            }

            return tempFile;

        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public String getBotUsername() {
        return "CoffeeBot";
    }

    @Override
    public String getBotToken() {
        return FileReadService.getInstance().readFile("C:\\Users\\StefanParmezan\\Desktop\\Home\\Programming\\CoffeeBot\\src\\main\\resources\\bot_token"); // –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —á—Ç–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
    }
}
